// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PregnantTreatmentTypeDTO,
} from '../models';

export interface DeletePregnantTreatmentTypeUsingDELETERequest {
    code: string;
}

export interface NewPregnantTreatmentTypeUsingPOSTRequest {
    pregnantTreatmentTypeDTO: PregnantTreatmentTypeDTO;
}

export interface UpdatePregnantTreatmentTypetUsingPUTRequest {
    code: string;
    pregnantTreatmentTypeDTO: PregnantTreatmentTypeDTO;
}

/**
 * no description
 */
export class PregnantTreatmentTypeControllerApi extends BaseAPI {

    /**
     * deletePregnantTreatmentType
     */
    deletePregnantTreatmentTypeUsingDELETE({ code }: DeletePregnantTreatmentTypeUsingDELETERequest): Observable<boolean>
    deletePregnantTreatmentTypeUsingDELETE({ code }: DeletePregnantTreatmentTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deletePregnantTreatmentTypeUsingDELETE({ code }: DeletePregnantTreatmentTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deletePregnantTreatmentTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/pregnanttreatmenttypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPregnantTreatmentTypes
     */
    getPregnantTreatmentTypesUsingGET(): Observable<Array<PregnantTreatmentTypeDTO>>
    getPregnantTreatmentTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PregnantTreatmentTypeDTO>>>
    getPregnantTreatmentTypesUsingGET(opts?: OperationOpts): Observable<Array<PregnantTreatmentTypeDTO> | RawAjaxResponse<Array<PregnantTreatmentTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PregnantTreatmentTypeDTO>>({
            url: '/pregnanttreatmenttypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newPregnantTreatmentType
     */
    newPregnantTreatmentTypeUsingPOST({ pregnantTreatmentTypeDTO }: NewPregnantTreatmentTypeUsingPOSTRequest): Observable<string>
    newPregnantTreatmentTypeUsingPOST({ pregnantTreatmentTypeDTO }: NewPregnantTreatmentTypeUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    newPregnantTreatmentTypeUsingPOST({ pregnantTreatmentTypeDTO }: NewPregnantTreatmentTypeUsingPOSTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(pregnantTreatmentTypeDTO, 'pregnantTreatmentTypeDTO', 'newPregnantTreatmentTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/pregnanttreatmenttypes',
            method: 'POST',
            headers,
            body: pregnantTreatmentTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     * updatePregnantTreatmentTypet
     */
    updatePregnantTreatmentTypetUsingPUT({ code, pregnantTreatmentTypeDTO }: UpdatePregnantTreatmentTypetUsingPUTRequest): Observable<string>
    updatePregnantTreatmentTypetUsingPUT({ code, pregnantTreatmentTypeDTO }: UpdatePregnantTreatmentTypetUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    updatePregnantTreatmentTypetUsingPUT({ code, pregnantTreatmentTypeDTO }: UpdatePregnantTreatmentTypetUsingPUTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(code, 'code', 'updatePregnantTreatmentTypetUsingPUT');
        throwIfNullOrUndefined(pregnantTreatmentTypeDTO, 'pregnantTreatmentTypeDTO', 'updatePregnantTreatmentTypetUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/pregnanttreatmenttypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: pregnantTreatmentTypeDTO,
        }, opts?.responseOpts);
    };

}
