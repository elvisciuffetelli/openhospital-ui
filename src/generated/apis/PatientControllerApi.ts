// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PatientDTO,
} from '../models';

export interface DeletePatientUsingDELETERequest {
    code: number;
}

export interface GetPatientAllUsingGETRequest {
    code: number;
}

export interface GetPatientUsingGETRequest {
    code: number;
}

export interface GetPatientsUsingGETRequest {
    page?: number;
    size?: number;
}

export interface MergePatientsUsingGETRequest {
    code2: number;
    mergedcode: number;
}

export interface NewPatientUsingPOSTRequest {
    newPatient: PatientDTO;
}

export interface SearchPatientUsingGETRequest {
    address?: string;
    birthDate?: string;
    firstName?: string;
    secondName?: string;
}

export interface UpdatePatientUsingPUTRequest {
    code: number;
    updatePatient: PatientDTO;
}

/**
 * no description
 */
export class PatientControllerApi extends BaseAPI {

    /**
     * deletePatient
     */
    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest): Observable<boolean>
    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deletePatientUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPatientAll
     */
    getPatientAllUsingGET({ code }: GetPatientAllUsingGETRequest): Observable<PatientDTO>
    getPatientAllUsingGET({ code }: GetPatientAllUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PatientDTO>>
    getPatientAllUsingGET({ code }: GetPatientAllUsingGETRequest, opts?: OperationOpts): Observable<PatientDTO | RawAjaxResponse<PatientDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getPatientAllUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
        };

        return this.request<PatientDTO>({
            url: '/patients/all',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * getPatientCities
     */
    getPatientCitiesUsingGET(): Observable<Array<object>>
    getPatientCitiesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<object>>>
    getPatientCitiesUsingGET(opts?: OperationOpts): Observable<Array<object> | RawAjaxResponse<Array<object>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<object>>({
            url: '/patients/cities',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPatientNextCode
     */
    getPatientNextCodeUsingGET(): Observable<number>
    getPatientNextCodeUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<number>>
    getPatientNextCodeUsingGET(opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<number>({
            url: '/patients/nextcode',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPatient
     */
    getPatientUsingGET({ code }: GetPatientUsingGETRequest): Observable<PatientDTO>
    getPatientUsingGET({ code }: GetPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PatientDTO>>
    getPatientUsingGET({ code }: GetPatientUsingGETRequest, opts?: OperationOpts): Observable<PatientDTO | RawAjaxResponse<PatientDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getPatientUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PatientDTO>({
            url: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPatients
     */
    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest): Observable<Array<PatientDTO>>
    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PatientDTO>>>
    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest, opts?: OperationOpts): Observable<Array<PatientDTO> | RawAjaxResponse<Array<PatientDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }

        return this.request<Array<PatientDTO>>({
            url: '/patients',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * mergePatients
     */
    mergePatientsUsingGET({ code2, mergedcode }: MergePatientsUsingGETRequest): Observable<boolean>
    mergePatientsUsingGET({ code2, mergedcode }: MergePatientsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    mergePatientsUsingGET({ code2, mergedcode }: MergePatientsUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code2, 'code2', 'mergePatientsUsingGET');
        throwIfNullOrUndefined(mergedcode, 'mergedcode', 'mergePatientsUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code2': code2,
            'mergedcode': mergedcode,
        };

        return this.request<boolean>({
            url: '/patients/merge',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * newPatient
     */
    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest): Observable<PatientDTO>
    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PatientDTO>>
    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest, opts?: OperationOpts): Observable<PatientDTO | RawAjaxResponse<PatientDTO>> {
        throwIfNullOrUndefined(newPatient, 'newPatient', 'newPatientUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PatientDTO>({
            url: '/patients',
            method: 'POST',
            headers,
            body: newPatient,
        }, opts?.responseOpts);
    };

    /**
     * searchPatient
     */
    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest): Observable<Array<PatientDTO>>
    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PatientDTO>>>
    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest, opts?: OperationOpts): Observable<Array<PatientDTO> | RawAjaxResponse<Array<PatientDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (address != null) { query['address'] = address; }
        if (birthDate != null) { query['birthDate'] = birthDate; }
        if (firstName != null) { query['firstName'] = firstName; }
        if (secondName != null) { query['secondName'] = secondName; }

        return this.request<Array<PatientDTO>>({
            url: '/patients/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * updatePatient
     */
    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest): Observable<PatientDTO>
    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PatientDTO>>
    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest, opts?: OperationOpts): Observable<PatientDTO | RawAjaxResponse<PatientDTO>> {
        throwIfNullOrUndefined(code, 'code', 'updatePatientUsingPUT');
        throwIfNullOrUndefined(updatePatient, 'updatePatient', 'updatePatientUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PatientDTO>({
            url: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: updatePatient,
        }, opts?.responseOpts);
    };

}
