// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs";
import {
  BaseAPI,
  HttpHeaders,
  throwIfNullOrUndefined,
  OperationOpts,
  RawAjaxResponse,
} from "../runtime";
import { UserSettingDTO } from "../models";

export interface NewUserSettingUsingPOSTRequest {
  userSettingDTO: UserSettingDTO;
}

/**
 * no description
 */
export class UserSettingControllerApi extends BaseAPI {
  /**
   * getUserSettingDashBoard
   */
  getUserSettingDashBoardUsingGET(): Observable<UserSettingDTO>;
  getUserSettingDashBoardUsingGET(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserSettingDTO>>;
  getUserSettingDashBoardUsingGET(
    opts?: OperationOpts
  ): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<UserSettingDTO>(
      {
        url: "/usersettings/dashboard",
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * newUserSetting
   */
  newUserSettingUsingPOST({
    userSettingDTO,
  }: NewUserSettingUsingPOSTRequest): Observable<UserSettingDTO>;
  newUserSettingUsingPOST(
    { userSettingDTO }: NewUserSettingUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserSettingDTO>>;
  newUserSettingUsingPOST(
    { userSettingDTO }: NewUserSettingUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
    throwIfNullOrUndefined(
      userSettingDTO,
      "userSettingDTO",
      "newUserSettingUsingPOST"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<UserSettingDTO>(
      {
        url: "/usersettings",
        method: "POST",
        headers,
        body: userSettingDTO,
      },
      opts?.responseOpts
    );
  }
}
