// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    OperationTypeDTO,
} from '../models';

export interface DeleteOperationTypeUsingDELETERequest {
    code: string;
}

export interface NewOperationTypeUsingPOSTRequest {
    operationTypeDTO: OperationTypeDTO;
}

export interface UpdateOperationTypetUsingPUTRequest {
    code: string;
    operationTypeDTO: OperationTypeDTO;
}

/**
 * no description
 */
export class OperationTypeControllerApi extends BaseAPI {

    /**
     * deleteOperationType
     */
    deleteOperationTypeUsingDELETE({ code }: DeleteOperationTypeUsingDELETERequest): Observable<boolean>
    deleteOperationTypeUsingDELETE({ code }: DeleteOperationTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteOperationTypeUsingDELETE({ code }: DeleteOperationTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteOperationTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/operationtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getOperationTypes
     */
    getOperationTypesUsingGET(): Observable<Array<OperationTypeDTO>>
    getOperationTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<OperationTypeDTO>>>
    getOperationTypesUsingGET(opts?: OperationOpts): Observable<Array<OperationTypeDTO> | RawAjaxResponse<Array<OperationTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<OperationTypeDTO>>({
            url: '/operationtypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newOperationType
     */
    newOperationTypeUsingPOST({ operationTypeDTO }: NewOperationTypeUsingPOSTRequest): Observable<string>
    newOperationTypeUsingPOST({ operationTypeDTO }: NewOperationTypeUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    newOperationTypeUsingPOST({ operationTypeDTO }: NewOperationTypeUsingPOSTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(operationTypeDTO, 'operationTypeDTO', 'newOperationTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/operationtypes',
            method: 'POST',
            headers,
            body: operationTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     * updateOperationTypet
     */
    updateOperationTypetUsingPUT({ code, operationTypeDTO }: UpdateOperationTypetUsingPUTRequest): Observable<string>
    updateOperationTypetUsingPUT({ code, operationTypeDTO }: UpdateOperationTypetUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    updateOperationTypetUsingPUT({ code, operationTypeDTO }: UpdateOperationTypetUsingPUTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(code, 'code', 'updateOperationTypetUsingPUT');
        throwIfNullOrUndefined(operationTypeDTO, 'operationTypeDTO', 'updateOperationTypetUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/operationtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: operationTypeDTO,
        }, opts?.responseOpts);
    };

}
